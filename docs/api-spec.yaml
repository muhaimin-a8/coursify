openapi: 3.0.3
info:
  title: 'COURSIFY'
  description: 'REST API written in Go'
  version: '1.0.0'
  contact:
    name: 'Muhaimin Abdillah'
    email: 'muhaiminabdillah85@gmail.com'
  license:
    name: 'Apache License 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: 'http://localhost:8080'
paths:
  /api/v1/api-keys:
    post:
      tags:
        - Api Keys
      summary: 'register new api key'
      responses:
        201:
          description: 'success to register new api key'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: object
                        properties:
                          api_key:
                            type: string
              example:
                success: true
                message: 'success to register new api key'
                data:
                  api_key: 'F6x8GAul47CN1usgBPoFBgnpQ2CWWuhU102fqH'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users:
    post:
      tags:
        - Users
      security:
        - ApiKeyAuth: [ ]
      summary: 'register new user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRegisterUser'
            example:
              username: 'john.doe'
              name: 'john doe'
              email: 'johndoe@example.com'
              password: '@JohnDoe009'
              role: 'instructor'

      responses:
        201:
          description: 'success to register new user'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: 'token to verify email'
              example:
                success: true
                message: 'success to register new user'
                data:
                  token: 'df453476-c078-44d5-a9fc-96eb807d2861'

        400:
          description: 'failed to register user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

              example:
                success: false
                message: 'failed to register new user'
                errors:
                  username:
                    - 'must at least 3 characters'
                  name:
                    - 'must not blank'
                    - 'must at least 3 characters'
                    - 'must not more than 25 characters'
                  password:
                    - 'must at least 8 characters'

        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
        - Administrators
      summary: 'get user lists'
      description: 'get user lists, only `admin` level can do'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/role'
      responses:
        200:
          description: 'success to get list of users'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
              example:
                success: true
                message: 'success to get list of users'
                data:
                  - id: 'user-111'
                    username: 'john.doe'
                    name: 'john doe'
                    role: 'student'
                    verified: true

                  - id: 'user-112'
                    username: 'jane_doe'
                    name: 'jane doe'
                    role: 'instructor'
                    verified: false

                  - id: 'user-113'
                    username: 'john_smith'
                    name: 'john smith'
                    role: 'student'
                    verified: true
                page:
                  current: 1
                  size: 3
                  total_pages: 100
                  total_items: 298

        403:
          $ref: '#/components/responses/Forbidden'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/current:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
      summary: 'get detail current logged user'
      responses:
        200:
          description: 'success get detail current logged user'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        $ref: '#/components/schemas/UserDetail'
              example:
                success: true
                message: 'success get detail current logged user'
                data:
                  id: 'user-111'
                  username: 'johndoe'
                  name: 'john doe'
                  email: 'johndoe@example.com'
                  role: 'student'
                  verified: true
                  created_at: 1698473495445
                  updated_at: 1698473495445
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
      summary: 'update current logged user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateUser'
            example:
              username: 'john_doe'
              name: 'john doe'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to update current logged user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

              example:
                success: false
                message: 'failed to update current logged user'
                errors:
                  username:
                    - 'username already used'

        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
      summary: 'delete current logged user'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/current/email:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
      summary: 'update email of current logged user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateUserEmail'
            example:
              new_email: 'johndoenew@example.com'
      responses:
        200:
          description: 'success update email of current logged user'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: 'token to verify email'
              example:
                success: true
                message: 'success update email of current logged user'
                data:
                  token: 'df453476-c078-44d5-a9fc-96eb807d2861'

        400:
          description: 'failed to update email of current logged user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update email of current logged user'
                errors:
                  email:
                    - 'email not match'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/current/password:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
      summary: 'update password of current logged user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateUserPassword'
            example:
              current_password: '@JohnDoe009'
              new_password: '#JohnDoe01'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to update password of current logged user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update email of current logged user'
                errors:
                  password:
                    - 'current password not match'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{userId}:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
        - Administrators
      summary: 'get detail user by id'
      description: 'get detail user by id, only `admin` can do'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: 'success get detail user by id'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        $ref: '#/components/schemas/UserDetail'
              example:
                success: true
                message: 'success get detail current user by id'
                data:
                  id: 'user-111'
                  username: 'johndoe'
                  name: 'john doe'
                  email: 'johndoe@example.com'
                  role: 'student'
                  verified: true
                  created_at: 1698473495445
                  updated_at: 1698473495445

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Users
        - Administrators
      summary: 'delete user by id'
      description: 'delete user by id, only `admin` can do'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/verifications/emails:
    post:
      tags:
        - Verifications
      security:
        - ApiKeyAuth: [ ]
      summary: 'verify user email'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestVerifyEmail'
            example:
              token: 'df453476-c078-44d5-a9fc-96eb807d2861'
              code: 976504
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to verify user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to verify user'
                errors:
                  token:
                    - 'token not match'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/verifications/emails/resend-code:
    put:
      tags:
        - Verifications
      security:
        - ApiKeyAuth: [ ]
      summary: 'resend email verification code'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResendEmailCode'
            example:
              token: 'df453476-c078-44d5-a9fc-96eb807d2861'

      responses:
        202:
          $ref: '#/components/responses/Accepted'

        400:
          description: 'failed to resend email verification code'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to resend email verification code'
                errors:
                  token:
                    - 'token must not blank'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/authentications/login:
    post:
      security:
        - ApiKeyAuth: [ ]
      tags:
        - Authentications
      summary: 'login user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLogin'
            example:
              email: 'johndoe@example.com'
              password: '@Super11secret'
      responses:
        200:
          description: 'success to login'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string

              example:
                success: true
                message: 'success to login'
                data:
                  access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
                  refresh_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ8'

        400:
          description: 'failed to login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to login'
                errors:
                  password:
                    - 'password must not blank'
        401:
          description: 'failed to login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to login, invalid credentials'

        412:
          description: 'failed to login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to login, unverified user'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/authentications/logout:
    delete:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Authentications
      summary: 'logout user'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/authentications/token:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Authentications
      summary: 'update access token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateAccessToken'
            example:
              refresh_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
      responses:
        200:
          description: 'success to update access token'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
              example:
                success: true
                message: 'success to update access token'
                data:
                  access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'

        400:
          description: 'failed to update access token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update access token'
                errors:
                  refresh_token:
                    - 'must not blank'
        401:
          description: 'failed to login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to login, invalid token'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/courses:
    post:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Course Instructors
      summary: 'create new course'
      description: 'create new course, only `instructor` can do'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateCourse'
            example:
              title: 'Learn Back-End Fundamental'
              description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
              price: 50
      responses:
        201:
          $ref: '#/components/responses/Created'

        400:
          description: 'failed to create new course'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to create new course'
                errors:
                  title:
                    - 'must not blank'

        403:
          $ref: '#/components/responses/Forbidden'

        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
      summary: 'get course lists'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: 'success to get course lists'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
              example:
                success: true
                message: 'success to get course lists'
                data:
                  - id: 'course-111'
                    title: 'Learn Back-End Fundamental'
                    description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 50
                    enrollments: 2972
                    rate: 4.6
                    disabled: false

                  - id: 'course-122'
                    title: 'Learn Front-End Fundamental'
                    description: 'Learn Front-End fundamental with JavaScript, VueJs, and MVC architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 45
                    enrollments: 1584
                    rate: 4.3
                    disabled: false

                  - id: 'course-111'
                    title: 'Learn Docker'
                    description: 'Learn Docker , Dockerfile, and docker compose'
                    instructor:
                      username: 'jane.doe'
                      name: 'jane doe'
                    price: 40
                    enrollments: 1264
                    rate: 4.2
                    disabled: false
                page:
                  current: 1
                  size: 3
                  total_pages: 174
                  total_items: 532
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/courses/owned:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Course Instructors
      summary: 'get owned course lists'
      description: 'get owned course lists, only `owned instructor` can do'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: 'success to get owned course lists'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
              example:
                success: true
                message: 'success to get course lists'
                data:
                  - id: 'course-111'
                    title: 'Learn Back-End Fundamental'
                    description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 50
                    enrollments: 2972
                    rate: 4.6
                    disabled: false

                  - id: 'course-122'
                    title: 'Learn Front-End Fundamental'
                    description: 'Learn Front-End fundamental with JavaScript, VueJs, and MVC architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 45
                    enrollments: 1584
                    rate: 4.3
                    disabled: false
                page:
                  current: 1
                  size: 2
                  total_pages: 10
                  total_items: 20
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/courses/enrolled:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Students
      summary: 'get enrolled course lists'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: 'success to get enrolled course lists'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
              example:
                success: true
                message: 'success to get course lists'
                data:
                  - id: 'course-111'
                    title: 'Learn Back-End Fundamental'
                    description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 50
                    enrollments: 2972
                    rate: 4.6
                    disabled: false

                  - id: 'course-122'
                    title: 'Learn Front-End Fundamental'
                    description: 'Learn Front-End fundamental with JavaScript, VueJs, and MVC architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 45
                    enrollments: 1584
                    rate: 4.3
                    disabled: false
                page:
                  current: 1
                  size: 2
                  total_pages: 10
                  total_items: 20
        500:
          $ref: '#/components/responses/InternalServerError'


  /api/v1/courses/search:
      get:
        security:
          - ApiKeyAuth: [ ]
          - JwtAuth: [ ]
        tags:
          - Courses
          - Students
        summary: 'search for courses'
        parameters:
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/size'
          - $ref: '#/components/parameters/keyword'
        responses:
          200:
            description: 'success to search for courses'
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/Response'
                    - properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Course'
                example:
                  success: true
                  message: 'success to get course lists'
                  data:
                    - id: 'course-111'
                      title: 'Learn Back-End Fundamental'
                      description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
                      instructor:
                        username: 'john.doe'
                        name: 'john doe'
                      price: 50
                      enrollments: 2972
                      rate: 4.6
                      disabled: false

                    - id: 'course-122'
                      title: 'Learn Front-End Fundamental'
                      description: 'Learn Front-End fundamental with JavaScript, VueJs, and MVC architecture'
                      instructor:
                        username: 'john.doe'
                        name: 'john doe'
                      price: 45
                      enrollments: 1584
                      rate: 4.3
                      disabled: false
                  page:
                    current: 1
                    size: 2
                    total_pages: 10
                    total_items: 20
          500:
            $ref: '#/components/responses/InternalServerError'

  /api/v1/courses/{courseId}:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
      summary: 'get detail course by id'
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          description: 'success to search for courses'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CourseDetail'
              example:
                success: true
                message: 'success to get course lists'
                data:
                  - id: 'course-111'
                    title: 'Learn Back-End Fundamental'
                    description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
                    instructor:
                      username: 'john.doe'
                      name: 'john doe'
                    price: 50
                    enrollments: 2972
                    rate: 4.6
                    sections:
                      - id: 'section-122'
                        title: 'Introduction to JavaScript'
                        description: 'Introduction to JavaScript'
                        completed: true
                      - id: 'section-123'
                        title: 'Introduction to JavaScript'
                        description: 'Introduction to JavaScript'
                        completed: false
                      - id: 'section-124'
                        title: 'Introduction to JavaScript'
                        description: 'Introduction to JavaScript'
                        completed: false
                    created_at: 1698473495445
                    updated_at: 1698473495445
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Course Instructors
      summary: 'update course by id'
      description: 'update course by id, only `course owner instructor` can do'
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateCourse'
            example:
              title: 'Back-End Fundamental'
              description: 'Learn Back-End fundamental with JavaScript, REST API, nodejs, and clean architecture'
              price: 56
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to update course'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update course'
                errors:
                  title:
                    - 'must not blank'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - 'Course Instructors'
      summary: 'delete course by id'
      description: 'delete course by id, only `course owner instructor` can do'
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/courses/{courseId}/disable:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Course Instructors
        - Administrators
      summary: 'disable course by id'
      description: 'disable course by id, only `course owner instructor` or `administrator`  can do'
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/courses/{courseId}/enable:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Courses
        - Course Instructors
        - Administrators
      summary: 'enable course by id'
      description: 'enable course by id, only `course owner instructor` or `administrator`  can do'
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/couses/{courseId}/sections:
    post:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
      summary: 'create course section'
      description: 'create course section, only `course owner instructor` can do'
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateCourseSection'
            example:
              title: 'Introduction to Docker'
              description: 'what is docker?, why we should learn it?, how to use it?'
              content: 'Docker is .....'
      responses:
        201:
          $ref: '#/components/responses/Created'

        400:
          description: 'failed to update course'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update course'
                errors:
                  title:
                    - 'must not blank'
                content:
                  - 'must not blank'
                  - 'must not more than 2500 characters'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
        - Students
      summary: 'get course section lists'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          description: 'success to get course section lists'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CourseSection'
              example:
                success: true
                message: 'success to get course section lists'
                data:
                  - id: 'section-122'
                    title: 'Introduction to JavaScript'
                    description: 'Introduction to JavaScript'
                    completed: true
                  - id: 'section-123'
                    title: 'Introduction to JavaScript'
                    description: 'Introduction to JavaScript'
                    completed: false
                  - id: 'section-124'
                    title: 'Introduction to JavaScript'
                    description: 'Introduction to JavaScript'
                    completed: false
                page:
                  current: 1
                  size: 3
                  total_pages: 2
                  total_items: 6
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/couses/{courseId}/sections/latest:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
        - Students
      summary: 'get detail latest uncompleted section'
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        200:
          description: 'success to get detail latest uncompleted section'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CourseSectionDetail'
              example:
                success: true
                message: 'success to get course section lists'
                data:
                  id: 'section-122'
                  title: 'Introduction to JavaScript'
                  description: 'Introduction to JavaScript'
                  completed: false
                  content: 'Introduction to JavaScript'
                  created_at: 1698473495445
                  updated_at: 1698473495445
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/couses/{courseId}/sections/{sectionId}:
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
        - Students
      summary: 'get detail section by id'
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/sectionId'
      responses:
        200:
          description: 'success get detail section by id'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CourseSectionDetail'
              example:
                success: true
                message: 'success to get course section lists'
                data:
                  id: 'section-122'
                  title: 'Introduction to JavaScript'
                  description: 'Introduction to JavaScript'
                  completed: false
                  content: 'Introduction to JavaScript'
                  created_at: 1698473495445
                  updated_at: 1698473495445
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
      summary: 'update section by id'
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/sectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateCourseSection'
            example:
              title: 'Introduction to Docker'
              description: 'what is docker?, why we should learn it?, how to use it?'
              content: 'Docker is .....'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to update course section'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to update course'
                errors:
                  title:
                    - 'must not blank'
                content:
                  - 'must not blank'
                  - 'must not more than 2500 characters'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

    delete:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
      summary: 'delete section by id'
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/sectionId'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/couses/{courseId}/sections/{sectionId}/completed:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Sections
        - Course Instructors
        - Students
      summary: 'mark completed section by id'
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/sectionId'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /api/v1/couses/enrollments:
    post:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Enrollments
        - Students
      summary: 'enroll a course'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEnrollCourse'
            example:
              course_id: 'course-112'
      responses:
        200:
          $ref: '#/components/responses/Ok'

        400:
          description: 'failed to enroll course'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                success: false
                message: 'failed to enroll course'
                errors:
                  course_od:
                    - 'must not blank'

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Enrollments
        - Students
      summary: 'list enrollments'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: 'success to list enrollments'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Enrollment'
              example:
                success: true
                message: 'success to list enrollments'
                data:
                  - id: 'enroll-123'
                    course_id: 'course-123'
                    user_id: 'user-123'
                    disabled: false
                    completed: false
                    completed_at: null
                    created_at: 1698473495445
                    updated_at: 1698473495445
                  - id: 'enroll-124'
                    course_id: 'course-125'
                    user_id: 'user-123'
                    disabled: false
                    completed: false
                    completed_at: null
                    created_at: 1698473495445
                    updated_at: 1698473495445
                  - id: 'enroll-129'
                    course_id: 'course-126'
                    user_id: 'user-123'
                    disabled: true
                    completed: false
                    completed_at: null
                    created_at: 1698473495445
                    updated_at: 1698473495445
                page:
                  current: 1
                  size: 3
                  total_pages: 2
                  total_items: 6

        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
  /api/v1/couses/enrollments/{enrollmentId}/disable:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Enrollments
        - Administrators
      summary: 'disable an enrollment'
      description: 'disable an enrollment, only `administrator` can do'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
  /api/v1/couses/enrollments/{enrollmentId}/enable:
    put:
      security:
        - ApiKeyAuth: [ ]
        - JwtAuth: [ ]
      tags:
        - Course Enrollments
        - Administrators
      summary: 'enable an enrollment'
      description: 'enable an enrollment, only `administrator` can do'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        403:
          $ref: '#/components/responses/Forbidden'

        404:
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    ApiKeyAuth:
      description: API KEY for all request
      type: apiKey
      in: header
      name: X-API-KEY

    JwtAuth:
      description: JWT Authentications
      type: http
      in: header
      scheme: Bearer

  parameters:
    page:
      name: page
      in: query
      description: 'the order of pages you want to access, default value is 1, page start with 1'
      required: false
      schema:
        type: integer
    size:
      name: size
      in: query
      description: 'number of items per page, default value is 10'
      required: false
      schema:
        type: integer

    keyword:
      name: keyword
      in: query
      description: 'keyword to search'
      required: false
      schema:
        type: string

    role:
      name: role
      in: query
      description: 'get user lists based on role'
      required: false
      schema:
        type: string
        enum:
          - 'student'
          - 'instructor'
          - 'admin'

    userId:
      required: true
      in: 'path'
      name: userId
      schema:
        type: string

    courseId:
      required: true
      in: 'path'
      name: courseId
      schema:
        type: string

    sectionId:
      required: true
      in: 'path'
      name: sectionId
      schema:
        type: string

    enrollmentId:
      required: true
      in: 'path'
      name: enrollmentId
      schema:
        type: string

  responses:
    Ok:
      description: 'request success'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: true
            status: 'request success'

    Accepted:
      description: 'request accepted'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: true
            status: 'request accepted'

    Created:
      description: 'success to create resource'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: true
            message: 'success to create new resource'

    Forbidden:
      description: 'access denied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: false
            message: 'access denied'

    NotFound:
      description: 'resource not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: false
            message: 'resource not found'

    InternalServerError:
      description: 'Internal server error occurred'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            success: false
            message: 'internal server error'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - 'student'
            - 'instructor'
            - 'admin'
        verified:
          type: boolean
          description: 'is email of user verified'

    UserDetail:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            email:
              type: string
            created_at:
              type: number
              description: 'unix milis format'
            updated_at:
              type: number
              description: 'unix milis format'

    Course:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        instructor:
          type: object
          properties:
            username:
              type: string
            name:
              type: string
        price:
          type: number
        enrollments:
          type: number
          description: 'number of students that enrolled this course'
        disabled:
          type: boolean
        rate:
          type: number
          description: 'course rating by students that finished this course'

    CourseDetail:
      allOf:
        - $ref: '#/components/schemas/Course'
        - properties:
            sections:
             type: array
             items:
               $ref: '#/components/schemas/CourseSection'
            created_at:
              type: number
              description: 'unix milis format'
            updated_at:
              type: number
              description: 'unix milis format'

    CourseSection:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean

    CourseSectionDetail:
      type: object
      properties:
        content:
          type: string
        created_at:
          type: number
        updated_at:
          type: number

    Enrollment:
      type: object
      properties:
        id:
          type: string
        course_id:
          type: string
        user_id:
          type: string
        disabled:
          type: boolean
        completed:
          type: boolean
        completed_at:
          type: number
        created_at:
          type: number
        updated_at:
          type: number

    RequestRegisterUser:
      type: object
      properties:
        username:
          type: string
          required: true
          maxLength: 15
        name:
          type: string
          required: true
          maxLength: 25
        email:
          type: string
          required: true
          maxLength: 30
        password:
          type: string
          required: true
          minLength: 8
          maxLength: 25
        role:
          type: string
          required: true
          enum:
            - 'student'
            - 'instructor'

    RequestUpdateUser:
      type: object
      properties:
        username:
          type: string
          required: true
          minLength: 3
          maxLength: 15
        name:
          type: string
          required: true
          maxLength: 25

    RequestUpdateUserEmail:
      type: object
      properties:
        new_email:
          type: string
          required: true
          maxLength: 30

    RequestUpdateUserPassword:
      type: object
      properties:
        current_password:
          type: string
          required: true
          minLength: 8
          maxLength: 25
        new_password:
          type: string
          required: true
          minLength: 8
          maxLength: 25

    RequestVerifyEmail:
      type: object
      properties:
        token:
          type: string
          description: 'token sent when register new user'
        code:
          type: number
          description: 'code sent via email'

    RequestResendEmailCode:
      type: object
      properties:
        token:
          type: string
          description: 'token sent when register new user or update email'

    RequestLogin:
      type: object
      properties:
        email:
          type: string
          maxLength: 30
        password:
          type: string
          minLength: 8
          maxLength: 25

    RequestUpdateAccessToken:
      type: object
      properties:
        refresh_token:
          type: string
          description: 'refresh token sent when user login'

    RequestCreateCourse:
      type: object
      properties:
        title:
          type: string
          maxLength: 25
        description:
          type: string
          maxLength: 100
        price:
          type: number

    RequestUpdateCourse:
      type: object
      properties:
        title:
          type: string
          maxLength: 25
        description:
          type: string
          maxLength: 100
        price:
          type: number

    RequestCreateCourseSection:
      type: object
      properties:
        title:
          type: string
          maxLength: 25
        description:
          type: string
          maxLength: 50
        content:
          type: string
          maxLength: 2500

    RequestUpdateCourseSection:
      type: object
      properties:
        title:
          type: string
          maxLength: 25
        description:
          type: string
          maxLength: 50
        content:
          type: string
          maxLength: 2500

    RequestEnrollCourse:
      type: object
      properties:
        course_id:
          type: string
          maxLength: 25

    Response:
      type: object
      properties:
        success:
          type: boolean
          nullable: false
          description: 'is request from client success'
        message:
          type: string
          nullable: false
          description: 'short message from server'
        errors:
          type: object
          nullable: true
          properties:
            field.error:
              type: array
              items:
                type: string
        data:
          type: object
          nullable: true
        page:
          type: object
          nullable: true
          properties:
            current:
              type: integer
              description: 'current page'
            size:
              type: integer
              description: 'number of items per page'
            total_pages:
              type: integer
              description: 'total number of pages'
            total_items:
              type: integer
              description: 'total data items'
